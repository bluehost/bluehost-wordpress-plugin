name: Package Plugin

on:
  release:
    types:
      - created
      - updated

env:
  VERSION: ${GITHUB_REF#refs/tags/*}

concurrency:
  group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
  cancel-in-progress: true

jobs:
  build:
    name: On Release
    runs-on: ubuntu-latest
    steps:

      - name: Checkout
        uses: actions/checkout@v2

      - name: Validate version number
        if: !github.event.release.prerelease
        run: |
          taggedVersion=${{ env.VERSION }}
          pluginHeaderVersion=`grep "Version:" bluehost-wordpress-plugin.php | grep -Eo "[0-9\.]*"`
          pluginConstantVersion=`grep "_PLUGIN_VERSION" bluehost-wordpress-plugin.php | grep -Eo "[0-9\.]*"`
          echo "Tagged version: $taggedVersion"
          echo "Plugin header version: $pluginHeaderVersion"
          echo "Plugin constant version: $pluginConstantVersion"
          [[ "$taggedVersion" == "$pluginHeaderVersion" ]] || exit 1
          [[ "$taggedVersion" == "$pluginConstantVersion" ]] || exit 1

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          coverage: none
          tools: composer, cs2pr

      - name: Setup workflow context
        id: workflow
        working-directory: ${{ runner.temp }}
        env:
          REPO: ${{ github.repository }}
        run: |
          mkdir dist
          echo ::set-output name=DIST::${PWD}/dist
          echo ::set-output name=PACKAGE::${REPO##*/}

      - name: Use Node.js 16.x
        uses: actions/setup-node@v1
        with:
          node-version: 16.x

      - name: Get npm cache directory
        id: npm-cache
        run: echo "::set-output name=dir::$(npm config get cache)"

      - name: Cache node modules
        uses: actions/cache@v2
        with:
          path: ${{ steps.npm-cache.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Get Composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache Composer vendor directory
        uses: actions/cache@v2
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-composer-

      - name: Show versions
        run: |
          php --version
          composer --version
          node --version
          npm --version

      - name: Validate composer.json and composer.lock
        run: composer validate

      - name: Install PHP Dependencies
        run: composer install --no-progress --no-dev --optimize-autoloader --prefer-dist

      - name: NPM Install
        run: npm install --legacy-peer-deps

      - name: Build JavaScript
        run: npm run build

      - name: Create Distribution Copy
        run: rsync -r --exclude-from=.distignore . ${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}

      - name: List Distribution Files
        working-directory: ${{ steps.workflow.outputs.DIST }}
        run: find .

      - name: Create Zip
        working-directory: ${{ steps.workflow.outputs.DIST }}
        run: zip -r ${{ steps.workflow.outputs.PACKAGE }}.zip .

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: https://uploads.github.com/repos/${{ github.repository }}/releases/${{ github.event.release.id }}/assets{?name,label}
          asset_path: ${{ steps.workflow.outputs.DIST }}/${{ steps.workflow.outputs.PACKAGE }}.zip
          asset_name: ${{ steps.workflow.outputs.PACKAGE }}.zip
          asset_content_type: application/zip

      - name: Clear cache for release API
        if: ${{ github.repository == 'bluehost/bluehost-wordpress-plugin' }}
        run: |
          curl -X POST "https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/purge_cache" \
               -H "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
               -H "Content-Type: application/json" \
               --data '{"files":["https://hiive.cloud/workers/release-api/plugins/bluehost/bluehost-wordpress-plugin"]}'

